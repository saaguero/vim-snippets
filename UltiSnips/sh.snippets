priority -50

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet #!
`!p snip.rv = '#!/bin/' + getShell() + "\n\n" `
endsnippet

snippet !env "#!/usr/bin/env (!env)"
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n\n" `
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`})"
${3:${4/(.+)/trap "/}${4:rm -f '$${1/.*\s//}'}${4/(.+)/" 0               # EXIT\n/}${5/(.+)/trap "/}${5:rm -f '$${1/.*\s//}'; exit 1}${5/(.+)/" 2       # INT\n/}${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'; exit 1}${6/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern} )
		$0;;
esac
endsnippet

snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
endsnippet

snippet for "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
	${0:#statements}
done
endsnippet

snippet forin "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:#statements}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:EOF}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet

snippet if "if ... then (if)"
if ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
fi
endsnippet

snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet


# Adapted from http://mywiki.wooledge.org/BashFAQ/035
snippet opt "handle command-line arguments (opt)"
version=1.0.0
file=

function show_help {
echo "
Usage: `basename "\$0"` [OPTIONS]

	Run and do some cool stuff

	-f, --file FILE		the file
	-h, --help			display this help and exit
	--version			output version information and exit
"
}

while :; do
	case \$1 in
		-h|--help)
			show_help
			exit
			;;
		--version)
			echo `basename "\$0"` version "$version"
			exit
			;;
		-f|--file)
			if [ -n "\$2" ]; then
				file=\$2
				shift 2
				continue
			else
				printf 'ERROR: "--file" requires a non-empty option argument.\n' >&2
				exit 1
			fi
			;;
		--) # End of all options.
			shift
			break
			;;
		-?*)
			printf 'WARN: Unknown option (ignored): %s\n' "\$1" >&2
			;;
		*)
			break
	esac

	shift
done

if [ -z "\$file" ]; then
	printf 'ERROR: option "--file FILE" not given. See --help.\n' >&2
	exit 1
fi
endsnippet

# vim:ft=snippets:
